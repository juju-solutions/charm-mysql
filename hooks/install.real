#!/usr/bin/python
import glob
import os
import sys
import uuid
import lib.utils as utils
from subprocess import check_output, CalledProcessError
from charmhelpers.fetch import (
    apt_install,
    apt_update,
    add_source
)

from charmhelpers.core import hookenv, host
from charmhelpers.core.templating import render




hookenv.status_set('maintenance', 'Setting up additional sources')
# Add archive source of provided
add_source(utils.config_get('source'), utils.config_get('key'))
apt_update()

# Pre-exec
if os.path.isdir('exec.d'):
    for f in glob.glob("exec.d/*/charm-pre-install"):
        if not os.access(f, os.X_OK):
            continue
        try:
            check_output([f])
        except CalledProcessError as exc:
            ## bail out if anyone fails
            utils.juju_log('ERROR', str(exc))
            sys.exit(1)

    # Update again in case any pre-exec script(s) modified sources.
    apt_update()

hookenv.status_set('maintenance', 'Installing support packages')
apt_install(['debconf-utils', 'python-mysqldb', 'uuid', 'pwgen', 'dnsutils'])

ROOT_PASSFILE = os.path.join('/root', 'mysql.passwd')
if not os.path.isfile(ROOT_PASSFILE):
    dirname = os.path.dirname(ROOT_PASSFILE)
    if not os.path.isdir(dirname):
        os.mkdir(dirname)
    with open(ROOT_PASSFILE, 'w'):
        pass

os.chmod(ROOT_PASSFILE, 0600)
with open(ROOT_PASSFILE, 'a') as fd:
    fd.seek(0, os.SEEK_END)
    if fd.tell() == 0:
        fd.seek(0)
        fd.write(str(uuid.uuid4()))
                
# install limits.conf file to a systemd's mysql service unit
# to allow configuring more than 214 connections in mysql
if host.init_is_systemd():
    render('limits.j2', '/etc/systemd/system/mysql.service.d/limits.conf',
        context={})